import telebot, sqlite3, requests, random
from telebot import types
from datetime import datetime, timedelta
from texts import financial_advice

TOKEN = '5849575828:AAGdAbpIoPGmkM-TWMAcQ8guq8nvcv0PoHM'
bot = telebot.TeleBot(TOKEN)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
items = [
    "–î–æ—Ö–æ–¥—ã ‚¨ÜÔ∏è",
    "–†–∞—Å—Ö–æ–¥—ã ‚¨áÔ∏è",
    "–£—á–µ—Ç „ÄΩÔ∏è",
    "–°–æ–≤–µ—Ç–Ω–∏–∫ üßô‚Äç‚ôÇÔ∏è",
    "–ò–Ω—Ñ–æ ‚ÑπÔ∏è",
]
main_menu.add(*items)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üï∫\n"
        "–î–∞–≤–∞–π—Ç–µ –∂–µ –≤–æ–∑—å–º–µ–º —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å\n"
        '\n'
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    bot.send_message(message.chat.id, welcome_message, reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Ö–æ–¥—ã"
@bot.message_handler(func=lambda message: message.text == "–î–æ—Ö–æ–¥—ã ‚¨ÜÔ∏è")
def handle_income(message):
    bot.send_message(message.chat.id, "–ú–µ–Ω—é –¥–æ—Ö–æ–¥–æ–≤:", reply_markup=income_menu)


# –ú–µ–Ω—é –¥–æ—Ö–æ–¥–æ–≤
income_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
item_add_income = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
item_undo_income = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥")
item_list_income = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤")
item_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
income_menu.add(item_add_income, item_undo_income, item_list_income, item_back)


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É "income" —Å –¥–∞—Ç–æ–π (–º–µ—Å—è—Ü –∏ –≥–æ–¥) –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
conn = sqlite3.connect('finance.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS income (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        amount REAL,
        date TEXT
    )
''')
conn.commit()
conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Ö–æ–¥"
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
def add_income(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    bot.register_next_step_handler(msg, save_income)


def save_income(message):
    try:
        income_amount = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_date = datetime.now().strftime('%Y.%m.%d')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        add_income_to_db(income_amount, current_date)

        bot.send_message(message.chat.id, f"–î–æ—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {income_amount} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞, –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Ö–æ–¥—ã" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –¥–æ—Ö–æ–¥–æ–≤
        handle_income(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")


def add_income_to_db(amount, date):
    conn = sqlite3.connect('finance.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO income (amount, date) VALUES (?, ?)", (amount, date))
    conn.commit()
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥"
@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥")
def undo_last_income(message):
    conn = sqlite3.connect('finance.db')
    cursor = conn.cursor()

    # –í—ã–±–∏—Ä–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –æ –¥–æ—Ö–æ–¥–µ
    cursor.execute("SELECT id FROM income ORDER BY id DESC LIMIT 1")
    last_income_id = cursor.fetchone()

    if last_income_id:
        last_income_id = last_income_id[0]
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–µ
        cursor.execute("DELETE FROM income WHERE id=?", (last_income_id,))
        conn.commit()
        bot.send_message(message.chat.id, "–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤ –ø—É—Å—Ç.")

    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤"
@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤")
def list_income(message):
    conn = sqlite3.connect('finance.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, amount, date FROM income")
    income_records = cursor.fetchall()
    conn.close()

    if income_records:
        income_list = ""
        total_income = 0

        for record in income_records:
            income_id, income_amount, income_date = record
            income_list += f"{income_id}) {income_date} ‚ûñ {int(income_amount)} —Å–æ–º\n"
            total_income += int(income_amount)

        bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤:\n{income_list}\n–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤: {total_income} —Å–æ–º")
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤ –ø—É—Å—Ç.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Ö–æ–¥—ã"
@bot.message_handler(func=lambda message: message.text == "–†–∞—Å—Ö–æ–¥—ã ‚¨áÔ∏è")
def handle_expenses(message):
    bot.send_message(message.chat.id, "–ú–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–æ–≤:", reply_markup=expenses_menu)


# –ú–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–æ–≤
expenses_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
item_add_expense = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
item_undo_expense = types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥")
item_list_expense = types.KeyboardButton("–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤")
item_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
expenses_menu.add(item_add_expense, item_undo_expense, item_list_expense, item_back)


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É "expenses" —Å –¥–∞—Ç–æ–π (–º–µ—Å—è—Ü –∏ –≥–æ–¥) –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
conn = sqlite3.connect('finance.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS expenses (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        amount REAL,
        date TEXT
    )
''')
conn.commit()
conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
def add_expense(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    bot.register_next_step_handler(msg, save_expense)


def save_expense(message):
    try:
        expense_amount = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_date = datetime.now().strftime('%Y.%m.%d')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ö–æ–¥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        add_expense_to_db(expense_amount, current_date)

        bot.send_message(message.chat.id, f"–†–∞—Å—Ö–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {expense_amount} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞, –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Ö–æ–¥—ã" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–æ–≤
        handle_expenses(message)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")


def add_expense_to_db(amount, date):
    conn = sqlite3.connect('finance.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO expenses (amount, date) VALUES (?, ?)", (amount, date))
    conn.commit()
    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥"
@bot.message_handler(func=lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥")
def undo_last_expense(message):
    conn = sqlite3.connect('finance.db')
    cursor = conn.cursor()

    # –í—ã–±–∏—Ä–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–µ
    cursor.execute("SELECT id FROM expenses ORDER BY id DESC LIMIT 1")
    last_expense_id = cursor.fetchone()

    if last_expense_id:
        last_expense_id = last_expense_id[0]
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ
        cursor.execute("DELETE FROM expenses WHERE id=?", (last_expense_id,))
        conn.commit()
        bot.send_message(message.chat.id, "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç.")

    conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤"
@bot.message_handler(func=lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤")
def list_expenses(message):
    conn = sqlite3.connect('finance.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, amount, date FROM expenses")
    expense_records = cursor.fetchall()
    conn.close()

    if expense_records:
        expense_list = ""
        total_expenses = 0

        for record in expense_records:
            expense_id, expense_amount, expense_date = record
            expense_list += f"{expense_id}) {expense_date} ‚ûñ {int(expense_amount)} —Å–æ–º\n"
            total_expenses += int(expense_amount)

        bot.send_message(message.chat.id,
                         f"–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤:\n{expense_list}\n–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses} —Å–æ–º")
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—É—Å—Ç.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@bot.message_handler(func=lambda message: message.text == "–£—á–µ—Ç „ÄΩÔ∏è")
def statistics(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    month_button = types.KeyboardButton("–ó–∞ –º–µ—Å—è—Ü")
    three_months_button = types.KeyboardButton("–ó–∞ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞")
    half_year_button = types.KeyboardButton("–ü–æ–ª–≥–æ–¥–∞")
    year_button = types.KeyboardButton("–ì–æ–¥")
    back_to_main_menu_button = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    markup.add(month_button, three_months_button)
    markup.add(half_year_button, year_button)
    markup.add(back_to_main_menu_button)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
def get_statistics_for_period(period_days):
    conn = sqlite3.connect('finance.db')
    cursor = conn.cursor()

    end_date = datetime.now()
    start_date = end_date - timedelta(days=period_days)

    cursor.execute("SELECT SUM(amount) FROM income WHERE date BETWEEN ? AND ?",
                   (start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y.%m.%d')))
    total_income = cursor.fetchone()[0]

    cursor.execute("SELECT SUM(amount) FROM expenses WHERE date BETWEEN ? AND ?",
                   (start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y.%m.%d')))
    total_expenses = cursor.fetchone()[0]

    total_income = int(total_income) if total_income else 0
    total_expenses = int(total_expenses) if total_expenses else 0

    conn.close()

    return total_income, total_expenses


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
def get_period_dates(period_days):
    end_date = datetime.now()
    start_date = end_date - timedelta(days=period_days)
    return start_date, end_date


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
def handle_period_statistics(message, period_days):
    total_income, total_expenses = get_statistics_for_period(period_days)
    start_date, end_date = get_period_dates(period_days)

    # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞"
    start_date_str = start_date.strftime('%d.%m')
    end_date_str = end_date.strftime('%d.%m')

    if period_days == 30:
        period_name = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü ({start_date_str} - {end_date_str}):"
    elif period_days == 90:
        period_name = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞ ({start_date_str} - {end_date_str}):"
    elif period_days == 180:
        period_name = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ–ª–≥–æ–¥–∞ ({start_date_str} - {end_date_str}):"
    elif period_days == 365:
        period_name = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≥–æ–¥ ({start_date_str} - {end_date_str}):"
    else:
        period_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    response_text = f"{period_name}\n\n"
    response_text += f"–û–±—â–∏–π –¥–æ—Ö–æ–¥üî∫: {total_income} —Å–æ–º\n"
    response_text += f"–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥üîª: {total_expenses} —Å–æ–º"

    bot.send_message(message.chat.id, response_text)


@bot.message_handler(func=lambda message: message.text == "–ó–∞ –º–µ—Å—è—Ü")
def stats_for_month(message):
    handle_period_statistics(message, 30)


@bot.message_handler(func=lambda message: message.text == "–ó–∞ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞")
def stats_for_three_months(message):
    handle_period_statistics(message, 90)


@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª–≥–æ–¥–∞")
def stats_for_half_year(message):
    handle_period_statistics(message, 180)


@bot.message_handler(func=lambda message: message.text == "–ì–æ–¥")
def stats_for_year(message):
    handle_period_statistics(message, 365)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ–≤–µ—Ç–Ω–∏–∫"
@bot.message_handler(func=lambda message: message.text == "–°–æ–≤–µ—Ç–Ω–∏–∫ üßô‚Äç‚ôÇÔ∏è")
def start_shopper_advice(message):
    bot.send_message(message.chat.id, "–í–∞—à –ª–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫, —á—Ç–æ–±—ã —É–±–µ—Ä–µ—á—å –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã.\n –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∏–∂–µ:")
    ask_question(message.chat.id, 0, 0, 0)


questions = [
    "1.–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–¥–∞–µ—Ç–µ—Å—å –≤ —ç—Ç–æ–º —Ç–æ–≤–∞—Ä–µ?",
    "2.–í—ã —É–∂–µ –∏—Å–∫–∞–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏–ª–∏ —Å—Ä–∞–≤–Ω–∏–ª–∏ —Ü–µ–Ω—ã?",
    "3.–£ –º–µ–Ω—è –µ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–µ–π—á–∞—Å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —ç—Ç–æ –±–µ–∑ –≤—Ä–µ–¥–∞ –¥–ª—è –±—é–¥–∂–µ—Ç–∞?",
    "4.–ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–¥—É–º–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π?",
    "5.–≠—Ç–æ –ø–æ–∫—É–ø–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞? ",
    "6.–ú–æ–≥—É –ª–∏ —è –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∑–∞—Ç—Ä–∞—Ç?",
    "7.–≠—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É –º–µ–Ω—è –µ—Å—Ç—å?",
    "8.–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∫—É–ø–∫–∞ –≤–∞—à–∏–º–∏ —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–ª—è–º –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º?",
    "9.–°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –æ—Ç–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —ç—Ç—É –ø–æ–∫—É–ø–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—Ä–µ–¥–∏—Ç–∞?",
]


def ask_question(chat_id, question_index, yes_count, no_count):
    if question_index < len(questions):
        question = questions[question_index]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç", "/cancel")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É /cancel
        bot.send_message(chat_id, question, reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(chat_id, lambda message: process_answer(message, question_index, yes_count, no_count))
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(chat_id, "–û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...", reply_markup=markup)
        if yes_count > no_count:
            bot.send_message(chat_id, "–°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç—É –ø–æ–∫—É–ø–∫—É.")
        else:
            bot.send_message(chat_id, "–°–æ–≤–µ—Ç: –ü–æ–¥—É–º–∞–π—Ç–µ –µ—â—ë, –ø–æ–∫—É–ø–∫–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—É—é.")


def process_answer(message, question_index, yes_count, no_count):
    answer = message.text.lower()
    if answer == "–¥–∞":
        yes_count += 1
    elif answer == "–Ω–µ—Ç":
        no_count += 1
    elif answer == "/cancel":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
        bot.send_message(message.chat.id, "–û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        handle_back(message)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    question_index += 1
    ask_question(message.chat.id, question_index, yes_count, no_count)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ"
@bot.message_handler(func=lambda message: message.text == "–ò–Ω—Ñ–æ ‚ÑπÔ∏è")
def info_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    info_items = ["–°—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤", "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    markup.add(*info_items)
    bot.send_message(message.chat.id, "–ú–µ–Ω—é –ò–Ω—Ñ–æ:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤"
@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç—É—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤")
def financial_status(message):
    # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞–¥ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
    def calculate_income_expense_ratio():
        conn = sqlite3.connect('finance.db')
        cursor = conn.cursor()

        cursor.execute("SELECT SUM(amount) FROM income")
        total_income = cursor.fetchone()[0]

        cursor.execute("SELECT SUM(amount) FROM expenses")
        total_expenses = cursor.fetchone()[0]
        conn.close()

        if total_income is None:
            total_income = 0
        if total_expenses is None:
            total_expenses = 0

        if total_income >= total_expenses:
            income_expense_ratio = (total_income - total_expenses) / total_income * 100
            return income_expense_ratio
        else:
            income_expense_ratio = (total_expenses - total_income) / total_expenses * 100
            return -income_expense_ratio
    ratio = calculate_income_expense_ratio()

    if ratio >= 100:
        bot.send_message(message.chat.id, "–î–æ—Ö–æ–¥—ã –±–æ–ª—å—à–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ 100%. –û—Ç–ª–∏—á–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!")
    elif ratio >= 75:
        bot.send_message(message.chat.id, "–î–æ—Ö–æ–¥—ã –±–æ–ª—å—à–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ 75%. –§–∏–Ω–∞–Ω—Å–æ–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è!")
    elif ratio >= 50:
        bot.send_message(message.chat.id, "–î–æ—Ö–æ–¥—ã –±–æ–ª—å—à–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ 50%. –≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    elif ratio >= 25:
        bot.send_message(message.chat.id, "–î–æ—Ö–æ–¥—ã –±–æ–ª—å—à–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ 25%. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
    elif ratio >= -25:
        bot.send_message(message.chat.id, "–†–∞—Å—Ö–æ–¥—ã –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ 25%. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏.")
    elif ratio >= -50:
        bot.send_message(message.chat.id, "–†–∞—Å—Ö–æ–¥—ã –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ 50%. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–ª–∞–Ω—ã.")
    elif ratio >= -75:
        bot.send_message(message.chat.id, "–†–∞—Å—Ö–æ–¥—ã –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ 75%. –°–∏—Ç—É–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏.")
    else:
        bot.send_message(message.chat.id, "–†–∞—Å—Ö–æ–¥—ã –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ 100%. –°—Ä–æ—á–Ω–æ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã –ø–æ —Ñ–∏–Ω. —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏.")

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç
    random_advice = random.choice(financial_advice)
    bot.send_message(message.chat.id, f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç –¥–Ω—è: \n{random_advice}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"
@bot.message_handler(func=lambda message: message.text == "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
def currency_rates(message):
    # –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç —Å —Å–∞–π—Ç–∞
    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    response = requests.get(url)
    data = response.json()

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç
    usd_rate = data["Valute"]["USD"]["Value"] * 0.925
    eur_rate = data["Valute"]["EUR"]["Value"] * 0.925
    kzt_rate = data["Valute"]["KZT"]["Value"] * 0.925
    cny_rate = data["Valute"]["CNY"]["Value"] * 0.925
    jpy_rate = data["Valute"]["JPY"]["Value"] * 0.925

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –æ–¥–Ω–æ–π –¥–µ—Å—è—Ç–æ–π
    currency_message = f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n" \
                       f"–î–æ–ª–ª–∞—Ä $ - {usd_rate:.1f} —Å–æ–º\n" \
                       f"–ï–≤—Ä–æ ‚Ç¨ - {eur_rate:.1f} —Å–æ–º\n" \
                       f"–¢–µ–Ω–≥–µ ‚Ç∏ - {kzt_rate:.1f} —Å–æ–º\n" \
                       f"–Æ–∞–Ω—å Ôø• - {cny_rate:.1f} —Å–æ–º\n" \
                       f"–ò–µ–Ω–∞ ¬• - {jpy_rate:.1f} —Å–æ–º\n" \

    bot.send_message(message.chat.id, currency_message)


@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def return_to_main_menu_from_info(message):
    bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def handle_back(message):
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–µ–Ω—é
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç
    if message.text:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)
